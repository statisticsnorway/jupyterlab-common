name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - 'main'
  tags:
   include:
    - '*'
  paths:
    include:
      - docker

resources:
  repositories:
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      endpoint: statisticsnorway

pool:
  name: 'extended_storage'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/statistikktjenester/jupyterlab-common'
  - name: repoName
    value: 'prod-bip/ssb/statistikktjenester/jupyterlab-common'
  - name: imageTagAfterVulnerabilityScan
    value: '$(Build.SourceBranchName)-$(Build.SourceVersion)'

# Job which builds Docker image, pushes this to GCR and checks for any image vulnerabilities
# NOTE: Sub-project pipelines are still running with the root working directory
jobs:
  - job: dockerBuildAndDockerPush
    timeoutInMinutes: 360
    displayName: 'Build jupyterlab-common image for dapla'
    steps:
      - template: docker/docker-build-image-and-push-to-gcr.yml@templates
        parameters:
          imageName: $(imageName)
          repoName: $(repoName)
          Dockerfile: 'docker/Dockerfile'

      # Need to tag 'latest' image (used by docker-tag-for-production)
      - script: |
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin ${{ variables.imageHost }}
          docker pull ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }}
          docker tag ${{ variables.imageName }}:imagescan-${{ variables.imageTagAfterVulnerabilityScan }} ${{ variables.imageName }}:latest
          docker push ${{ variables.imageName }}:latest
        displayName: "Retagging latest image"
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

  # Job which pulls the Docker image with the 'latest' tag from GCR, tags this
  # with the git tag, and pushes that back to GCR.
  # The job triggers when any tag was committed to GitHub, which means all tags in
  # the code repo are propagated to the corresponding (newly built) image in GCR.
  - template: docker/docker-tag-for-production.yml@templates
    parameters:
      tagToTag: 'latest'
      gcrImageName: ${{ variables.imageName }}